const express = require('express'); //(npm install express)
const User = require('../models/User');
const { body, validationResult } = require('express-validator');
const bcrypt = require('bcryptjs'); //first install: (npm install bryptjs" It is used for creating hash of the password by combining salt in it

const fetchuser = require('../middleware/fetchuser')

var jwt = require('jsonwebtoken'); //(npm install jsonwebtoken) it creates a token for each user database

const res = require('express/lib/response');

const JWT_SECRET = 'ZeeshaAnsari'
// this line is from "express validator search on google" after this make an array in router.post


const router = express.Router();


//Route 1(Use to register the new user): Create a user by Using: POST "/api/auth/createuser". Doesn't require auth (by going to body in request)
//No login required

router.post('/createuser',[
    body('name', 'Enter a valid name').isLength({ min: 3 }),
    body('email', 'Enter a valid email').isEmail(),
    body('password', 'Password must be atleast 5 charactors').isLength({ min: 5 }),   
], async (req, res)=>{
  let  success= false
    //If there are errors, return bacd request and the error
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
   
    //Check whether user with same email exist already

    try {

   
    let user = await User.findOne({email: req.body.email});

    if(user){ 
        return res.status(400).json({success, error: "Sorry an user with this email already exist"})}

        //create a password hash along with salt by using bcryptjs package
        const salt = await  bcrypt.genSalt(10);
        const   secPass = await bcrypt.hash(req.body.password, salt)


      //create a new user 
     user = await User.create({
        name: req.body.name,
        email: req.body.email,
        password: secPass,
      })
      

      //use of jwt
      const data = {
        user:{
          id: user.id
        }
      }
      
     const authtoken =  jwt.sign(data, JWT_SECRET);

    //res.json(user)  //instead of user we will use token which is generated by jwt
    success = true
    res.json({success, authtoken})//this will show my auth token in the response of the thunderclient
    }
 catch(error){
    console.error(error.message);
    res.status(500).send("Internal server error")
}
});


//Route 2(use to autheticate login credentials of existing user): by Using: POST "/api/auth/login" no login required
router.post('/login',[
  body('email', 'Enter a valid email').isEmail(),
  body('password', 'Password cannot be blank').exists()

], async (req, res)=>{
  //If there are errors, return bacd request and the error
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  const {email, password} =req.body;
  try {
    let user = await User.findOne({email})
    if (!user){
      return res.status(400).json({error: "Please login with correct credintials"})
    }
    const passwordCompare = await bcrypt.compare(password, user.password);
    if (!passwordCompare){
    let  success= false
      return res.status(400).json({success, error: "Please login with correct credintials"})
    }
    const data = {
      user:{
        id: user.id
      }
    }
    const authtoken =  jwt.sign(data, JWT_SECRET); 
    let success = true
    res.json({success, authtoken})
  
  } catch(error){
    console.error(error.message);
    res.status(500).send("Internal server error")
  }
})

//Route 3(use to get user details ): by Using: POST "/api/auth/getuser" no login required
router.post('/getuser',fetchuser, async (req, res)=>{
try {
  userId = req.user.id;
  const user = await User.findById(userId).select("-password")
  res.send(user)
} catch (error) {
  console.error(error.message);
    res.status(500).send("Internal server error")
}
})


module.exports = router